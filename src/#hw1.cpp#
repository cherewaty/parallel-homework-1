#include <iostream>
#include <omp.h>
#include "hw1.h"

double euclidean_length(std::vector<double> vector)
{
  //in parallel
	omp_set_num_threads(vector.size());
	//in parallel
	#pragma omp parallel
	i = omp_get_thread_num();
  vector[i] = vector[i] * vecotr[i];
	//barrier
	//end parallel
	for (int d = 1; d<n; d = 2d){
		#pragma omp parallel
			for (i = 1; i<= n-1; i++){
				if(i-d>0){
					vector[i] = vector[i] + 
				}
			}
	}

  //hellis steele method
  
  // Your code goes here.
  return 0;
}
std::vector<int64_t> discard_duplicates(std::vector<int64_t> sorted_vector)
{
  //in parallel 
  // Your code goes here
  return std::vector<int64_t>();
}
